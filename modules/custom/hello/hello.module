<?php
function hello_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match){
    switch ($route_name) {
        // Main module help for the block module.
        case 'help.page.hello':
            return '<p>' . t('hello') . '</p>';
        break;
    }

}

/**
 * hook_cron message
 */
function hello_cron() {
    drupal_set_message("message d'erreur test cron","error");
}

function hello_user_login($account) {
    //dpm($account);
    //kint($account);
    //accountinterface

    if (! \Drupal::currentUser()->isAnonymous()) {
        $account_name->getAccountName();
        drupal_set_message(t("Bienvenue cher @name",array('@name' => $account_name)));
    }else{
        drupal_set_message(t("Bienvenue cher @name"));
    }


}

/**
 * Implements hook_node_update_index().
 * updater la table hello_node_history à chaque modification d'un node
 */
function hello_node_update(\Drupal\node\NodeInterface $node)
{
    $id= $node->id();
    $auteur= \Drupal::currentUser();
    $id_auteur= $auteur->id();
    $date= time();

    $query= \Drupal::database()->insert('hello_node_history');
    $query->fields([
        'uid',
        'update_time',
        'nid'
    ]);
    $query->values([
        $id_auteur,
        $date,
        $id,
    ]);
    $query->execute();

}

/**
 * Implements hook_page_attachments().
 * attacher une librairie
 */
function hello_page_attachments(array &$page)
{
    $page['#attached']['library'][]= 'hello/base'; //nom de la librairie
}

/**
 * Implements hook_preprocess_HOOK().
 * aller chercher une configuration et attribuer sa valeur
 * au tableau des variables pour ajouter une classe
 */
function hello_preprocess_block(&$variables)
{
    //kint($variables);

    $colorblock= \Drupal::config('hello.config')->get('color');
    $variables['attributes']['class']['']= $colorblock;
}

/**
 * Implements hook_theme().
 */
function hello_theme($existing, $type, $theme, $path)
{
    return array(
        'theme_history' => array(
            'template' => 'hello-node-history',
            'variables' => array('data' => NULL, 'name' => NULL, 'count' => NULL),
        ),
    );

}

/**
 * Implements hook_form_alter().
 * pour le formulaire de contact
 * &$form & =envoyer par référence donc pas besoin de return
 */
function hello_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    if($form_id=="contact_message_feedback_form"){

        $form['telephone']= array(
            '#type'=>           'textfield',
            '#title'=>          t('Phone :'),
            '#Description'=>    t('Enter the phone : '),
            '#size'=>           '40',
            '#maxlengh'=>       '128',
            '#weight'=>         '-5',
            '#suffix'=> '<span class="text-message"></span>',
        );

        $form['subject']['#access']=FALSE;
        $form['actions']['submit']['#value']= t('Envoyer le message maintenant');
        //kint($form);

    }
}





